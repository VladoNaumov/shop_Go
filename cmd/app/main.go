package main

// main.go

import (
	"context"
	"crypto/sha256"
	"errors"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"myApp/internal/core"

	"github.com/gorilla/csrf"
)

func main() {
	// --- 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ ---
	cfg := core.Load()

	// --- 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª (–ø–æ –¥–∞—Ç–µ) ---
	// –°–æ–∑–¥–∞—Å—Ç logs/DD-MM-YYYY.log –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ–≥ —Ç—É–¥–∞.
	core.InitDailyLog()

	// üîÅ --- 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å ---
	go func() {
		for {
			next := time.Now().Add(24 * time.Hour).Truncate(24 * time.Hour)
			time.Sleep(time.Until(next))
			core.InitDailyLog() // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π —Ñ–∞–π–ª logs/DD-MM-YYYY.log
		}
	}()

	// --- 4. –°–∞–Ω–∏—Ç–∏-–ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è prod ---
	if cfg.Env == "prod" {
		if cfg.CSRFKey == "" {
			log.Println("ERROR: missing CSRF_KEY in prod")
			os.Exit(1) // —Ñ–∞—Ç–∞–ª–∏–º –ø—Ä–æ–¥ –±–µ–∑ –∫–ª—é—á–∞
		}
		if !cfg.Secure {
			log.Println("WARN: APP_ENV=prod but Secure=false; HTTPS/HSTS disabled")
		}
	}

	// --- 5. –°–æ–∑–¥–∞—ë–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä (—Ä–æ—É—Ç–µ—Ä) ---
	router := core.NewRouter() // –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –º–∞—Ä—à—Ä—É—Ç—ã –≤–Ω—É—Ç—Ä–∏ –ø–∞–∫–µ—Ç–∞ internal/http

	// --- 6. –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–∏–¥–ª–≤–∞—Ä–∞–º–∏ ---
	var h http.Handler = router

	// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –≤–∫–ª—é—á–∞–µ–º HSTS (—Å—Ç—Ä–æ–≥–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ HTTPS)
	if cfg.Secure {
		h = hsts(h)
	}

	// --- 7. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CSRF-–∑–∞—â–∏—Ç—É ---
	// Gorilla CSRF —Ç—Ä–µ–±—É–µ—Ç 32-–±–∞–π—Ç–æ–≤—ã–π –∫–ª—é—á, –±–µ—Ä—ë–º SHA256 –æ—Ç —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.
	csrfKey := derive32(cfg.CSRFKey)
	h = csrf.Protect(
		csrfKey,
		csrf.Secure(cfg.Secure),             // —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ HTTPS, –µ—Å–ª–∏ Secure = true
		csrf.SameSite(csrf.SameSiteLaxMode), // –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ñ–æ—Ä–º
		csrf.HttpOnly(true),                 // —Ç–æ–∫–µ–Ω –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ JS
		csrf.Path("/"),                      // CSRF-—Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –≤–µ—Å—å —Å–∞–π—Ç
	)(h)

	// --- 8. –°–æ–∑–¥–∞—ë–º HTTP-—Å–µ—Ä–≤–µ—Ä ---
	srv := core.Server(cfg.Addr, h)

	// --- 9. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º "graceful shutdown" (–º—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ) ---
	// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –û–°: Ctrl+C –∏–ª–∏ SIGTERM (–æ—Ç Docker/—Å–µ—Ä–≤–∏—Å–∞)
	ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt, syscall.SIGTERM)
	defer stop()

	// --- 10. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ ---
	go func() {
		log.Printf("INFO: http: listening addr=%s env=%s app=%s", cfg.Addr, cfg.Env, cfg.AppName)
		if err := srv.ListenAndServe(); !errors.Is(err, http.ErrServerClosed) {
			// –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
			log.Printf("ERROR: http: server error: %v", err)
			os.Exit(1)
		}
	}()

	// --- 11. –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ---
	<-ctx.Done()
	log.Println("INFO: http: shutdown started")

	// --- 12. –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å —Ç–∞–π–º–∞—É—Ç–æ–º 10 —Å–µ–∫—É–Ω–¥ ---
	shutdownCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	if err := srv.Shutdown(shutdownCtx); err != nil {
		log.Printf("ERROR: http: shutdown error: %v", err)
	} else {
		log.Println("INFO: http: shutdown complete")
	}
}

// derive32 —Å–æ–∑–¥–∞—ë—Ç 32-–±–∞–π—Ç–æ–≤—ã–π –∫–ª—é—á –∏–∑ —Å—Ç—Ä–æ–∫–∏ (SHA256).
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è CSRF, —Ç–∞–∫ –∫–∞–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –∫–ª—é—á —Å—Ç—Ä–æ–≥–æ –¥–ª–∏–Ω–æ–π 32 –±–∞–π—Ç–∞.
func derive32(secret string) []byte {
	sum := sha256.Sum256([]byte(secret))
	return sum[:] // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º []byte –¥–ª–∏–Ω–æ–π 32
}

// hsts –¥–æ–±–∞–≤–ª—è–µ—Ç HTTP-–∑–∞–≥–æ–ª–æ–≤–æ–∫ Strict-Transport-Security.
// –û–Ω –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –±—Ä–∞—É–∑–µ—Ä—ã –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–º–µ–Ω–∞.
// –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ.
func hsts(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// 1 –≥–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è, –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–¥–æ–º–µ–Ω—ã, preload (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏)
		w.Header().Set("Strict-Transport-Security",
			"max-age=31536000; includeSubDomains; preload")
		next.ServeHTTP(w, r)
	})
}
