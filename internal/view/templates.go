package view

// internal/view/templates.go ‚Äî –°–∏—Å—Ç–µ–º–∞ HTML-—à–∞–±–ª–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

import (
	"fmt"
	"html/template"

	"myApp/internal/core"

	"github.com/gin-gonic/gin"
	csrf "github.com/utrack/gin-csrf"
)

// Templates ‚Äî —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Å–µ—Ö HTML-—à–∞–±–ª–æ–Ω–æ–≤ –≤ –ø–∞–º—è—Ç–∏.
// –ö–ª—é—á ‚Äî –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "home").
type Templates struct {
	templates map[string]*template.Template
}

// PageData ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º–∞—è –≤ —à–∞–±–ª–æ–Ω—ã.
type PageData struct {
	Title     string        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	CSRFField template.HTML // –°–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ <input> —Å CSRF-—Ç–æ–∫–µ–Ω–æ–º (–¥–ª—è –∑–∞—â–∏—Ç—ã —Ñ–æ—Ä–º)
	Nonce     string        // CSP nonce –¥–ª—è inline-—Å–∫—Ä–∏–ø—Ç–æ–≤/—Å—Ç–∏–ª–µ–π (–¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç XSS)
	Data      any           // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
}

// New ‚Äî –ø–∞—Ä—Å–∏—Ç layout, partials –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∫—ç—à–∏—Ä—É–µ—Ç.
func New() (*Templates, error) {
	// –û–±—â–∏–µ layout –∏ —á–∞—Å—Ç–∏—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∫–ª—é—á–∞—é—Ç—Å—è –≤–æ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	layouts := []string{
		"web/templates/layouts/base.gohtml",
		"web/templates/partials/nav.gohtml",
		"web/templates/partials/footer.gohtml",
	}

	// –°—Ç—Ä–∞–Ω–∏—Ü—ã -> —Ñ–∞–π–ª—ã
	pages := map[string][]string{
		"home":     {"web/templates/pages/home.gohtml"},
		"about":    {"web/templates/pages/about.gohtml"},
		"form":     {"web/templates/pages/form.gohtml"},
		"catalog":  {"web/templates/pages/catalog.gohtml"},
		"product":  {"web/templates/pages/show_product.gohtml"},
		"notfound": {"web/templates/pages/404.gohtml"},
	}

	t := &Templates{templates: make(map[string]*template.Template)}

	for name, pageFiles := range pages {
		// –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤: layout + partials + —Å—Ç—Ä–∞–Ω–∏—Ü–∞
		files := append([]string{}, layouts...)
		files = append(files, pageFiles...)

		tpl, err := template.ParseFiles(files...)
		if err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞ %q: %w", name, err)
		}
		t.templates[name] = tpl
	}

	return t, nil
}

// Render ‚Äî –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç HTML-—à–∞–±–ª–æ–Ω —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (CSRF/CSP).
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç *gin.Context, —á—Ç–æ–±—ã –±—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –∏ nonce, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã middleware.
func (t *Templates) Render(
	c *gin.Context,
	templateName string, // "home" | "form" | ...
	title string,
	data any,
) error {
	// 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —à–∞–±–ª–æ–Ω–∞
	tpl, ok := t.templates[templateName]
	if !ok {
		core.LogError("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", map[string]interface{}{"template": templateName})
		return fmt.Errorf("—à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", templateName)
	}

	// 2) üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ—Å—Ç–∞—ë–º CSP nonce –¢–û–õ–¨–ö–û –∏–∑ request.Context.
	// Nonce –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ request.Context —á–µ—Ä–µ–∑ middleware withNonceAndDB.
	nonce := ""
	if v, ok := c.Request.Context().Value(core.CtxNonce).(string); ok {
		nonce = v
	}

	if nonce == "" {
		// –ï—Å–ª–∏ nonce –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
		core.LogError("CSP Nonce –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–æ—Å–∞", nil)
		return fmt.Errorf("nonce –Ω–µ –Ω–∞–π–¥–µ–Ω: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
	}

	// 3) –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	// –í–∞–∂–Ω–æ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å Content-Type, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å MIME-sniffing.
	c.Header("Content-Type", "text/html; charset=utf-8")

	// 4) CSRF: –±–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏ —Å–∞–º–∏ —Å–æ–±–∏—Ä–∞–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ.
	token := csrf.GetToken(c)
	if token == "" {
		// –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞; –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥.
		core.LogError("CSRF —Ç–æ–∫–µ–Ω –ø—É—Å—Ç. –§–æ—Ä–º–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –∑–∞—â–∏—Ç—ã.", nil)
	}

	// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ HTML-–ø–æ–ª—è —Å CSRF-—Ç–æ–∫–µ–Ω–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è HTMLEscapeString.
	csrfField := template.HTML(
		fmt.Sprintf(`<input type="hidden" name="%s" value="%s">`,
			"csrf_token",                     // –ò–º—è –ø–æ–ª—è, –æ–∂–∏–¥–∞–µ–º–æ–µ gin-csrf
			template.HTMLEscapeString(token), // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
		),
	)

	// 5) –°–æ–±–∏—Ä–∞–µ–º PageData –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º
	page := PageData{
		Title:     title,
		CSRFField: csrfField,
		Nonce:     nonce,
		Data:      data,
	}

	// ExecuteTemplate –ø–∏—à–µ—Ç –ø—Ä—è–º–æ –≤ ResponseWriter, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ—Ä–Ω–µ–≤–æ–π —à–∞–±–ª–æ–Ω "base"
	if err := tpl.ExecuteTemplate(c.Writer, "base", page); err != nil {
		core.LogError("–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞", map[string]interface{}{
			"template": templateName,
			"error":    err.Error(),
		})
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –º–æ–≥ –µ–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500)
		return fmt.Errorf("—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ %s: %w", templateName, err)
	}
	return nil
}

// üß† –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–∞—à–µ–π –≤–µ—Ä—Å–∏–∏ (Gin + utrack/gin-csrf):
//
// 1) –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è view.New() ‚Äî —à–∞–±–ª–æ–Ω—ã –ø–∞—Ä—Å—è—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏.
//
// 2) –ö–∞–∂–¥—ã–π Gin-—Ö–µ–Ω–¥–ª–µ—Ä –≤—ã–∑—ã–≤–∞–µ—Ç tpl.Render(c, "–∏–º—è", "–∑–∞–≥–æ–ª–æ–≤–æ–∫", data).
//    Render –ø–æ–ª—É—á–∞–µ—Ç nonce –∏–∑ Gin-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–∫–ª–∞–¥—ë—Ç—Å—è middleware) –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç PageData.
//
// 3) CSRF: —Ç–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ utrack/gin-csrf: token := csrf.GetToken(c).
//    –°–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ —Å–æ–±–∏—Ä–∞–µ–º –≤—Ä—É—á–Ω—É—é:
//       <input type="hidden" name="csrf_token" value="...">
//    (–∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ‚Äî "csrf_token" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É utrack/gin-csrf).
//
// 4) CSP: nonce –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤ PageData.Nonce –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —à–∞–±–ª–æ–Ω–µ:
//       <script nonce="{{ .Nonce }}">...</script>
//       <style  nonce="{{ .Nonce }}">...</style>
//    SecureHeaders() —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç CSP —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –ø–æ nonce.
//
// 5) –ö–æ–Ω—Ç–µ–Ω—Ç-—Ç–∞–π–ø: Render —Å—Ç–∞–≤–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ "Content-Type: text/html; charset=utf-8".
//
// 6) –í base.gohtml –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–π —à–∞–±–ª–æ–Ω —Å –∏–º–µ–Ω–µ–º "base" ({{ define "base" }} ... {{ end }}),
//    –≤ –∫–æ—Ç–æ—Ä—ã–π –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ {{ template }} –∏–ª–∏ {{ block }}.

/*
<form method="POST" action="/form">
  {{ .CSRFField }}
  <input type="text" name="name">
  <input type="email" name="email">
  <textarea name="message"></textarea>
  <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
</form>

*/
