package core

// response.go ‚Äî –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON-–æ—Ç–≤–µ—Ç–æ–≤,
// –≤–∫–ª—é—á–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É RFC 7807 ("Problem Details for HTTP APIs")

import (
	"net/http"

	"github.com/gin-contrib/requestid"
	"github.com/gin-gonic/gin"
)

// -----------------------------------------------------------
// ProblemDetail ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—à–∏–±–∫–∏ –ø–æ RFC 7807
// https://datatracker.ietf.org/doc/html/rfc7807
// -----------------------------------------------------------
//
// –ü–æ–ª—è –æ–ø–∏—Å—ã–≤–∞—é—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É API –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
//
//	{
//	  "type": "/errors/invalid_email",
//	  "title": "Bad Request",
//	  "status": 400,
//	  "detail": "–ü–æ–ª–µ email —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ",
//	  "instance": "/errors/invalid_email",
//	  "code": "invalid_email",
//	  "fields": { "email": "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç" }
//	}
//
// –ö–ª–∏–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥) –º–æ–≥—É—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏.

type ProblemDetail struct {
	Type     string            `json:"type"`             // URI-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ (—É —Ç–µ–±—è /errors/{code})
	Title    string            `json:"title"`            // –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä "Bad Request")
	Status   int               `json:"status"`           // HTTP-—Å—Ç–∞—Ç—É—Å (400, 404, 500 –∏ —Ç.–¥.)
	Detail   string            `json:"detail"`           // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
	Instance string            `json:"instance"`         // URI –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è (—É —Ç–µ–±—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å Type)
	Code     string            `json:"code"`             // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä "invalid_email")
	Fields   map[string]string `json:"fields,omitempty"` // –û—à–∏–±–∫–∏ –ø–æ –ø–æ–ª—è–º (–¥–ª—è —Ñ–æ—Ä–º –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
}

// -----------------------------------------------------------
// JSON ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è c.JSON()
// -----------------------------------------------------------
// –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª—é–±–æ–π –æ–±—ä–µ–∫—Ç –∫–∞–∫ JSON-–æ—Ç–≤–µ—Ç —Å –Ω—É–∂–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.
// –£–¥–æ–±–Ω–æ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è ‚Äî –Ω–µ –ø–∏—Å–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑ c.JSON().

func JSON(c *gin.Context, status int, v any) {
	c.JSON(status, v)
}

// -----------------------------------------------------------
// FailC ‚Äî —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
// -----------------------------------------------------------
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö –º–µ—Å—Ç–∞—Ö, –≥–¥–µ –Ω—É–∂–Ω–æ:
//  1. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ–æ—Ä–º—É (—á–µ—Ä–µ–∑ From(err))
//  2. –ü—Ä–æ–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
//  3. –í–µ—Ä–Ω—É—Ç—å –∫–ª–∏–µ–Ω—Ç—É JSON-–æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ ProblemDetail
//  4. –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ü–µ–ø–æ—á–∫—É middleware (Abort)

func FailC(c *gin.Context, err error) {
	// ae (AppError) ‚Äî —Ç–≤–æ—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫ (core/app_error.go)
	// –í –Ω–µ–π –µ—Å—Ç—å –∫–æ–¥, HTTP-—Å—Ç–∞—Ç—É—Å, —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç.–¥.
	ae := From(err)

	// –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ (request_id)
	reqID := requestid.Get(c)
	if reqID == "" {
		// –ï—Å–ª–∏ middleware requestid –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
		reqID = c.GetHeader("X-Request-ID")
		if reqID == "" {
			reqID = "n/a"
		}
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–º –≤–∏–¥–µ
	LogError("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", map[string]interface{}{
		"request_id": reqID,        // ID –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞)
		"path":       c.FullPath(), // URL –º–∞—Ä—à—Ä—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä /api/users/:id)
		"code":       ae.Code,      // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä "db_error")
		"status":     ae.Status,    // HTTP —Å—Ç–∞—Ç—É—Å
		"message":    ae.Message,   // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		"fields":     ae.Fields,    // –û—à–∏–±–∫–∏ –ø–æ –ø–æ–ª—è–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
		"error":      ae.Err,       // –ò—Å—Ö–æ–¥–Ω–∞—è –æ—à–∏–±–∫–∞ (Go error)
	})

	// –ì–æ—Ç–æ–≤–∏–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ RFC 7807
	problem := ProblemDetail{
		Type:     "/errors/" + ae.Code,       // URI —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
		Title:    http.StatusText(ae.Status), // –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É (–Ω–∞–ø—Ä–∏–º–µ—Ä "Not Found")
		Status:   ae.Status,                  // –ö–æ–¥ HTTP
		Detail:   ae.Message,                 // –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		Instance: "/errors/" + ae.Code,       // –°–æ–≤–ø–∞–¥–∞–µ—Ç —Å type (–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º)
		Code:     ae.Code,                    // –¢–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥
		Fields:   ae.Fields,                  // –û—à–∏–±–∫–∏ –ø–æ –ø–æ–ª—è–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-–∫–ª–∏–µ–Ω—Ç—É
	JSON(c, ae.Status, problem)

	// –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ middleware/–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	c.Abort()
}

/*

### üß© –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —à–∞–≥ –∑–∞ —à–∞–≥–æ–º –≤ `FailC`

| –®–∞–≥ | –î–µ–π—Å—Ç–≤–∏–µ                               | –ü—Ä–∏–º–µ—Ä                               |
| --- | -------------------------------------- | ------------------------------------ |
| 1   | –ü–æ–ª—É—á–∞–µ–º `ae := From(err)`             | –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç `error` ‚Üí `AppError`    |
| 2   | –ò–∑–≤–ª–µ–∫–∞–µ–º `request_id`                 | –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–≤—è–∑–∞—Ç—å –ª–æ–≥–∏ –∏ –∑–∞–ø—Ä–æ—Å      |
| 3   | –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë —á–µ—Ä–µ–∑ `LogError()`        | –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Ñ–∞–π–ª/–∫–æ–Ω—Å–æ–ª—å            |
| 4   | –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É `ProblemDetail`    | –ì–æ—Ç–æ–≤–∏–º JSON –¥–ª—è –æ—Ç–≤–µ—Ç–∞              |
| 5   | –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON —Å –Ω—É–∂–Ω—ã–º HTTP-—Å—Ç–∞—Ç—É—Å–æ–º | –ù–∞–ø—Ä–∏–º–µ—Ä, 400 Bad Request            |
| 6   | `c.Abort()` –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É      | Gin –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ middleware |

---

üí° **–ó–∞—á–µ–º –≤—Å—ë —ç—Ç–æ:**
–¢—ã –ø–æ–ª—É—á–∞–µ—à—å **–µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—à–∏–±–æ–∫** –Ω–∞ –≤—Å—ë–º API ‚Äî
—É–¥–æ–±–Ω–æ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –∏ —Ç–µ—Å—Ç–æ–≤ (Postman, Jest –∏ —Ç.–¥.).

---


*/
