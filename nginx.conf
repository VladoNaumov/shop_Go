# Конфигурация NGINX для myApp (OWASP A05: Security Misconfiguration, A04: Design Flaws)

# HTTP-сервер для перенаправления на HTTPS
server {
    listen 80;
    server_name myapp.local;
    return 301 https://$server_name$request_uri; # Перенаправление всех HTTP-запросов на HTTPS (OWASP A02)
}

# HTTPS-сервер
server {
    listen 443 ssl;
    server_name myapp.local; # Домен приложения

    # Настройка TLS (OWASP A02: Cryptographic Failures)
    ssl_certificate /etc/letsencrypt/live/myapp.local/fullchain.pem; # Путь к сертификату
    ssl_certificate_key /etc/letsencrypt/live/myapp.local/privkey.pem; # Путь к приватному ключу
    ssl_protocols TLSv1.2 TLSv1.3; # Поддерживаемые протоколы TLS
    ssl_ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH; # Безопасные шифры

    # Ограничение размера тела запроса (OWASP A05)
    client_max_body_size 1m; # Ограничение до 1MB для соответствия Go-приложению

    # Ограничение скорости запросов для защиты от DoS-атак (OWASP A04)
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=50r/s; # Зона ограничения: 50 запросов/сек
    limit_req zone=mylimit burst=100; # Буфер до 100 запросов

    # Заголовки безопасности (OWASP A03, A05)
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), payment=()" always;
    add_header Cross-Origin-Opener-Policy "same-origin" always;

    # Обслуживание статических файлов с кэшированием и сжатием (OWASP A05)
    location /assets/ {
        alias /path/to/myApp/web/assets/; # Путь к статическим файлам
        expires 1y; # Кэширование на год
        add_header Cache-Control "public, immutable"; # Заголовки кэширования
        gzip on; # Включение сжатия
        gzip_types text/css application/javascript; # Типы файлов для сжатия
    }

    # Проксирование запросов к Go-приложению (OWASP A05)
    location / {
        proxy_pass http://127.0.0.1:8080; # Адрес Go-приложения
        proxy_set_header X-Forwarded-For $remote_addr; # Передача IP клиента
        proxy_set_header X-Real-IP $remote_addr; # Передача реального IP
        proxy_set_header X-Forwarded-Proto $scheme; # Передача схемы (http/https)
        proxy_set_header Host $host; # Передача имени хоста
    }

    # Поддержка CORS для API-эндпоинтов (OWASP A05)
    # Примечание: замените '*' на конкретные домены в продакшене
    location /api/ {
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' 'https://trusted.domain.com'; # Укажите доверенные домены
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Content-Type';
            return 204; # Ответ для preflight-запросов
        }
        proxy_pass http://127.0.0.1:8080; # Проксирование к Go-приложению
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
    }

    # Ограничение доступа к healthcheck-эндпоинту (OWASP A04)
    location /healthz {
        allow 127.0.0.1; # Разрешён только localhost
        deny all; # Запрет для остальных
        proxy_pass http://127.0.0.1:8080; # Проксирование к Go-приложению
    }
}