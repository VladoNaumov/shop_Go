# NGINX конфиг для myApp (OWASP A05, A04).
server {
    listen 80;
    listen 443 ssl;
    server_name myapp.local;

    # TLS (Let's Encrypt или свои сертификаты).
    ssl_certificate /etc/letsencrypt/live/myapp.local/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/myapp.local/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;

    # Перенаправление HTTP -> HTTPS.
    if ($scheme = http) {
        return 301 https://$server_name$request_uri;
    }

    # Rate limiting (100 req/s, 200 burst).
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=100r/s;
    limit_req zone=mylimit burst=200;

    # Кэширование и сжатие статики.
    location /assets/ {
        alias /path/to/myApp/web/assets/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        gzip on;
        gzip_types text/css application/javascript;
    }

    # Проксирование к Go.
    location / {
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
    }

    # CORS для /api/* (если добавите API).
    location /api/ {
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Content-Type';
            return 204;
        }
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
    }

    # Ограничение healthz (OWASP A04).
    location /healthz {
        allow 127.0.0.1;
        deny all;
        proxy_pass http://127.0.0.1:8080;
    }
}